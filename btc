
        function bitcoin(string $btc_csv, int $day_cnt, $data_column = 1, $date_column = 0)
        {
            $sf = fopen("$btc_csv","r");
            $seq = [];
            $data = [];
            fgets($sf);
            fgets($sf);
            $day_before = 0;
            $date_1 = 0;
            $y = 1;
            $base = 0;
            while (($data = fgetcsv($sf,300,','," ")) !== FALSE)
            {
                if ($base == 0 && $data[$data_column] > 0)
                    $base = $data[$data_column];
                $date_1 = $day_before;
                $seq[] = [ ($y), $date_1, $day_before, $data[$date_column] ];
                $day_before = $data[$data_column];
                $y+=$day_cnt;
            }
            fclose($sf);

            $string = "<table>";
            $string .= "<tr><td>Long Form Date </td><td> Integrand </td><td> Differential </td><td> Differential </td><td> Integral </td><td> Price</td><td>Low</td><td>RB</td></tr>";
            $y = 1;
            $vals = [];
            $x = 1;
            $exp = 1;
            $out = 1;
            $inc_real = 0;
            $inc_imaginary = 0;

            foreach($seq as $key) {
                $vals = $key;
                array_pop($vals);
                $vals[] = $this->integrand($key);
                $c = $this->differential($key);
                $real = "";
                $bool1 = false;
                if ($key[1] > $inc_real)
                {
                    $real = "<td>+".$key[1]."</td>";
                    $bool1 = true;
                }
                else
                    $real = "<td>-".$key[1]."</td>";
                $string .= "<tr><td>".$key[3]." </td><td> ".$vals[3]." </td><td> $c  </td><td>". $this->derive($vals) . " </td><td> ".$this->integral($key)."</td>$real";
                $lo = $this->derive($vals) / $vals[3] / $c;
                $lo *= $this->derive($vals);
                while ($lo <= 0.0999)
                    $lo *= 10;
                $short_low = abs(($lo));
                $short_low = ($lo * $vals[2]);
                $short_low = ($base + round($short_low / $out,2) - (1 * $exp));
                if ($short_low > pow(10, $exp) && $exp < 3) {
                    $out = pow(10, $exp++);
                }
                $bool2 = false;
                $same = "";
                if ($short_low > $inc_imaginary)
                {
                    $string .= "<td>+$short_low</td>";
                    $bool2 = true;
                }
                else if ($short_low < $inc_imaginary)
                    $string .= "<td>-$short_low</td>";
                else if ($short_low == $inc_imaginary)
                {
                    $string .= "<td>=$short_low</td>";
                    $bool2 = !$bool1;
                    $same = "now";
                }
                
                if ($bool2 == $bool1)
                    $string .= "<td style='color:blue;background-color:blue'>&&&&&&&&</td></tr>";
                else if ($same == "now")
                    $string .= "<td style='color:gold;background-color:black'>&&&&&&&&</td></tr>";
                else
                    $string .= "<td style='color:red;background-color:red'>&&&&&&&&</td></tr>";
                $same = "";
                $inc_real = $key[1];
                $inc_imaginary = $short_low;
                $x+=$day_cnt;
            }
            $base = $short_low;
            $str = "";
            $vals[0] = $z = $x;
            $key = $vals;
            for ($x = 0 ; $x < 100 ; $x++)
            {
                $vals = $key;
                $vals[3] = $this->integrand($key);
                $c = $this->differential($key);
                $str .= "<tr><td> $z </td><td> ".$vals[3]." </td><td> $c </td><td>". $this->derive($vals) . " </td><td> ".$this->integral($key)."</td><td>".$key[1]."</td>";
                $lo = $this->derive($vals) / $vals[3] / $c * $this->derive($vals);
                while ($lo <= 0.999)
                    $lo *= 10;
                $short_low = ($lo * $vals[2]);
                $short_low = ($base + round($short_low / $out,2));
                $short_low = abs($short_low);
                if ($short_low > pow(10, $exp) && $exp < 3) {
                    $out = pow(10, $exp++);
                }
                if ($short_low > $inc_imaginary)
                {
                    $str .= "<td>+$short_low</td>";
                    $bool2 = true;
                }
                else if ($short_low < $inc_imaginary)
                    $str .= "<td>-$short_low</td>";
                else if ($short_low == $inc_imaginary)
                {
                    $str .= "<td>=$short_low</td>";
                    $bool2 = !$bool1;
                    $same = "now";
                }
                
                if ($bool2 == $bool1)
                    $str .= "<td style='color:blue;background-color:blue'>&&&&&&&&</td></tr>";
                else if ($same == "now")
                    $str .= "<td style='color:gold;background-color:black'>&&&&&&&&</td></tr>";
                else
                    $str .= "<td style='color:red;background-color:red'>&&&&&&&&</td></tr>";
                $same = "";
                $inc_imaginary = $short_low;
                $inc_real = $vals[1];
                $z += $day_cnt;
                $key = [ ($z), $short_low, $vals[1] ];
            }
            $string .= $str . "</table>";
            $string .= "<br>Total Integral";
            $string .= "<br> &nbsp; &nbsp;" . $this->find_integral($seq);
            $string .= "<br>";
            return $string;
        }
